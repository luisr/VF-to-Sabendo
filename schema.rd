[
  {
    "schema": "public",
    "table_name": "collaborators",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to project members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "collaborators",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow read access to project members",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "collaborators",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "collaborators",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "collaborators_members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "profiles",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow users to manage their own profile",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "profiles",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Users update own profile",
    "mode": "PERMISSIVE",
    "command": "w",
    "roles": null,
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "profiles",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "profiles_own",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "(auth.uid() = id)",
    "with_check_expression": "(auth.uid() = id)"
  },
  {
    "schema": "public",
    "table_name": "project_baselines",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to project members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "project_baselines",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "project_change_log",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_change_log_members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(projeto_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "project_progress",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_progress_delete",
    "mode": "PERMISSIVE",
    "command": "d",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "project_progress",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_progress_insert",
    "mode": "PERMISSIVE",
    "command": "a",
    "roles": null,
    "using_expression": null,
    "with_check_expression": "is_project_member(project_id, auth.uid())"
  },
  {
    "schema": "public",
    "table_name": "project_progress",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_progress_members_modify",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": "is_project_member(project_id, auth.uid())"
  },
  {
    "schema": "public",
    "table_name": "project_progress",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_progress_members_read",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "project_progress",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_progress_select",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "project_progress",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "project_progress_update",
    "mode": "PERMISSIVE",
    "command": "w",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": "is_project_member(project_id, auth.uid())"
  },
  {
    "schema": "public",
    "table_name": "projects",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow DELETE for owners",
    "mode": "PERMISSIVE",
    "command": "d",
    "roles": null,
    "using_expression": "(owner_id = auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "projects",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow INSERT for any authenticated user",
    "mode": "PERMISSIVE",
    "command": "a",
    "roles": null,
    "using_expression": null,
    "with_check_expression": "(auth.role() = 'authenticated'::text)"
  },
  {
    "schema": "public",
    "table_name": "projects",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow members to read projects",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "projects",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow read access to project members",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "projects",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "projects",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "projects_members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "replannings",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "replannings_insert",
    "mode": "PERMISSIVE",
    "command": "a",
    "roles": null,
    "using_expression": null,
    "with_check_expression": "is_project_member(project_id, auth.uid())"
  },
  {
    "schema": "public",
    "table_name": "replannings",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "replannings_select",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "table_columns",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow authenticated read access",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "(auth.role() = 'authenticated'::text)",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "table_columns",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow authenticated users to read columns",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": "{authenticated}",
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "table_columns",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to authenticated users",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": "{authenticated}",
    "using_expression": "true",
    "with_check_expression": "true"
  },
  {
    "schema": "public",
    "table_name": "tags",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to authenticated users",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": "{authenticated}",
    "using_expression": "true",
    "with_check_expression": "true"
  },
  {
    "schema": "public",
    "table_name": "tags",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow read access to authenticated users",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "(auth.role() = 'authenticated'::text)",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tags",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tags",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "tags_read",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_baselines",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to project members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "( SELECT is_project_member(p.project_id, auth.uid()) AS is_project_member\n   FROM project_baselines p\n  WHERE (p.id = task_baselines.baseline_id))",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_baselines",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_dependencies",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow dependency access for task members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(( SELECT tasks.project_id\n   FROM tasks\n  WHERE (tasks.id = task_dependencies.task_id)), auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_history",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to project members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "( SELECT is_project_member(t.project_id, auth.uid()) AS is_project_member\n   FROM tasks t\n  WHERE (t.id = task_history.task_id))",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_history",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow history access for task members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(( SELECT tasks.project_id\n   FROM tasks\n  WHERE (tasks.id = task_history.task_id)), auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_history",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow members to read task history",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "(EXISTS ( SELECT 1\n   FROM (tasks t\n     JOIN collaborators c ON ((t.project_id = c.project_id)))\n  WHERE ((t.id = task_history.task_id) AND (c.user_id = auth.uid()))))",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_history",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_observations",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow authors or managers to delete observations",
    "mode": "PERMISSIVE",
    "command": "d",
    "roles": null,
    "using_expression": "((author_id = auth.uid()) OR (( SELECT collaborators.role\n   FROM collaborators\n  WHERE ((collaborators.user_id = auth.uid()) AND (collaborators.project_id = ( SELECT tasks.project_id\n           FROM tasks\n          WHERE (tasks.id = task_observations.task_id))))) = 'Gerente'::collaborator_role))",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_observations",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow authors to update their own observations",
    "mode": "PERMISSIVE",
    "command": "w",
    "roles": null,
    "using_expression": "(author_id = auth.uid())",
    "with_check_expression": "(author_id = auth.uid())"
  },
  {
    "schema": "public",
    "table_name": "task_observations",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow members to create observations",
    "mode": "PERMISSIVE",
    "command": "a",
    "roles": null,
    "using_expression": null,
    "with_check_expression": "(can_access_task_data(task_id) AND (author_id = auth.uid()))"
  },
  {
    "schema": "public",
    "table_name": "task_observations",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow members to view observations",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "can_access_task_data(task_id)",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_statuses",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to authenticated users",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": "{authenticated}",
    "using_expression": "true",
    "with_check_expression": "true"
  },
  {
    "schema": "public",
    "table_name": "task_statuses",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow read access to authenticated users",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "(auth.role() = 'authenticated'::text)",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_statuses",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_statuses",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "task_statuses_read",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "true",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "task_tags",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow tag access for task members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(( SELECT tasks.project_id\n   FROM tasks\n  WHERE (tasks.id = task_tags.task_id)), auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tasks",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to project members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tasks",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow members to read tasks",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tasks",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow read access to project members",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tasks",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Block all direct writes",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "false",
    "with_check_expression": null
  },
  {
    "schema": "public",
    "table_name": "tasks",
    "table_owner": "postgres",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "tasks_members",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": null,
    "using_expression": "is_project_member(project_id, auth.uid())",
    "with_check_expression": null
  },
  {
    "schema": "storage",
    "table_name": "objects",
    "table_owner": "supabase_storage_admin",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow authenticated read access",
    "mode": "PERMISSIVE",
    "command": "r",
    "roles": "{authenticated}",
    "using_expression": "((bucket_id = 'user_uploads'::text) AND ((storage.foldername(name))[1] = (auth.uid())::text))",
    "with_check_expression": null
  },
  {
    "schema": "storage",
    "table_name": "objects",
    "table_owner": "supabase_storage_admin",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow authenticated uploads",
    "mode": "PERMISSIVE",
    "command": "a",
    "roles": "{authenticated}",
    "using_expression": null,
    "with_check_expression": "((bucket_id = 'user_uploads'::text) AND ((storage.foldername(name))[1] = (auth.uid())::text))"
  },
  {
    "schema": "storage",
    "table_name": "objects",
    "table_owner": "supabase_storage_admin",
    "rls_enabled": true,
    "rls_forced": false,
    "policy_name": "Allow full access to tosabendo2 bucket",
    "mode": "PERMISSIVE",
    "command": "*",
    "roles": "{authenticated}",
    "using_expression": "(bucket_id = 'tosabendo2'::text)",
    "with_check_expression": "(bucket_id = 'tosabendo2'::text)"
  }
]
